// Generated by Bisonc++ V4.09.02 on Mon, 16 May 2016 17:39:56 +0200

// $insert class.ih
#include "elsoparseParser.ih"

// The FIRST element of SR arrays shown below uses `d_type', defining the
// state's type, and `d_lastIdx' containing the last element's index. If
// d_lastIdx contains the REQ_TOKEN bitflag (see below) then the state needs
// a token: if in this state d_token__ is _UNDETERMINED_, nextToken() will be
// called

// The LAST element of SR arrays uses `d_token' containing the last retrieved
// token to speed up the (linear) seach.  Except for the first element of SR
// arrays, the field `d_action' is used to determine what to do next. If
// positive, it represents the next state (used with SHIFT); if zero, it
// indicates `ACCEPT', if negative, -d_action represents the number of the
// rule to reduce to.

// `lookup()' tries to find d_token__ in the current SR array. If it fails, and
// there is no default reduction UNEXPECTED_TOKEN__ is thrown, which is then
// caught by the error-recovery function.

// The error-recovery function will pop elements off the stack until a state
// having bit flag ERR_ITEM is found. This state has a transition on _error_
// which is applied. In this _error_ state, while the current token is not a
// proper continuation, new tokens are obtained by nextToken(). If such a
// token is found, error recovery is successful and the token is
// handled according to the error state's SR table and parsing continues.
// During error recovery semantic actions are ignored.

// A state flagged with the DEF_RED flag will perform a default
// reduction if no other continuations are available for the current token.

// The ACCEPT STATE never shows a default reduction: when it is reached the
// parser returns ACCEPT(). During the grammar
// analysis phase a default reduction may have been defined, but it is
// removed during the state-definition phase.

// So:
//      s_x[] = 
//      {
//                  [_field_1_]         [_field_2_]
//
// First element:   {state-type,        idx of last element},
// Other elements:  {required token,    action to perform},
//                                      ( < 0: reduce, 
//                                          0: ACCEPT,
//                                        > 0: next state)
// Last element:    {set to d_token__,    action to perform}
//      }

// When the --thread-safe option is specified, all static data are defined as
// const. If --thread-safe is not provided, the state-tables are not defined
// as const, since the lookup() function below will modify them


namespace // anonymous
{
    char const author[] = "Frank B. Brokken (f.b.brokken@rug.nl)";

    enum 
    {
        STACK_EXPANSION = 5     // size to expand the state-stack with when
                                // full
    };

    enum ReservedTokens
    {
        PARSE_ACCEPT     = 0,   // `ACCEPT' TRANSITION
        _UNDETERMINED_   = -2,
        _EOF_            = -1,
        _error_          = 256
    };
    enum StateType       // modify statetype/data.cc when this enum changes
    {
        NORMAL,
        ERR_ITEM,
        REQ_TOKEN,
        ERR_REQ,    // ERR_ITEM | REQ_TOKEN
        DEF_RED,    // state having default reduction
        ERR_DEF,    // ERR_ITEM | DEF_RED
        REQ_DEF,    // REQ_TOKEN | DEF_RED
        ERR_REQ_DEF // ERR_ITEM | REQ_TOKEN | DEF_RED
    };    
    struct PI__     // Production Info
    {
        size_t d_nonTerm; // identification number of this production's
                            // non-terminal 
        size_t d_size;    // number of elements in this production 
    };

    struct SR__     // Shift Reduce info, see its description above
    {
        union
        {
            int _field_1_;      // initializer, allowing initializations 
                                // of the SR s_[] arrays
            int d_type;
            int d_token;
        };
        union
        {
            int _field_2_;

            int d_lastIdx;          // if negative, the state uses SHIFT
            int d_action;           // may be negative (reduce), 
                                    // postive (shift), or 0 (accept)
            size_t d_errorState;    // used with Error states
        };
    };

    // $insert staticdata
    
// Productions Info Records:
PI__ const s_productionInfo[] = 
{
     {0, 0}, // not used: reduction values are negative
     {296, 1}, // 1: start ->  szekciok
     {297, 2}, // 2: szekciok ->  szekcio szekciok
     {297, 1}, // 3: szekciok ->  szekcio
     {298, 1}, // 4: szekcio ->  global
     {298, 3}, // 5: szekcio (SECTION) ->  SECTION DATA datadeklaraciok
     {298, 3}, // 6: szekcio (SECTION) ->  SECTION BSS bssdeklaraciok
     {298, 3}, // 7: szekcio (SECTION) ->  SECTION TEXT utasitasok
     {298, 4}, // 8: szekcio (SECTION) ->  SECTION TEXT global utasitasok
     {299, 2}, // 9: global (GLOBAL) ->  GLOBAL AZONOSITO
     {300, 2}, // 10: datadeklaraciok ->  datadecl datadeklaraciok
     {300, 1}, // 11: datadeklaraciok ->  datadecl
     {301, 2}, // 12: bssdeklaraciok ->  bssdecl bssdeklaraciok
     {301, 1}, // 13: bssdeklaraciok ->  bssdecl
     {303, 4}, // 14: datadecl (AZONOSITO) ->  AZONOSITO KETTOSPONT meretdata szamok
     {305, 3}, // 15: szamok (VESSZO) ->  szamok VESSZO SZAM
     {305, 1}, // 16: szamok (SZAM) ->  SZAM
     {304, 4}, // 17: bssdecl (AZONOSITO) ->  AZONOSITO KETTOSPONT meretbss SZAM
     {306, 1}, // 18: meretdata (DB) ->  DB
     {306, 1}, // 19: meretdata (DW) ->  DW
     {306, 1}, // 20: meretdata (DD) ->  DD
     {307, 1}, // 21: meretbss (RESB) ->  RESB
     {307, 1}, // 22: meretbss (RESW) ->  RESW
     {307, 1}, // 23: meretbss (RESD) ->  RESD
     {302, 2}, // 24: utasitasok ->  utasitas utasitasok
     {302, 1}, // 25: utasitasok ->  utasitas
     {308, 4}, // 26: utasitas (KETARGUMENTUMOS) ->  KETARGUMENTUMOS argumentum VESSZO argumentum
     {308, 2}, // 27: utasitas (EGYARGUMENTUMOS) ->  EGYARGUMENTUMOS argumentum
     {308, 2}, // 28: utasitas (UGROUTAS) ->  UGROUTAS AZONOSITO
     {308, 3}, // 29: utasitas (UGROUTAS) ->  UGROUTAS NEAR AZONOSITO
     {308, 1}, // 30: utasitas (RET) ->  RET
     {308, 2}, // 31: utasitas ->  cimke utasitas
     {309, 2}, // 32: cimke (AZONOSITO) ->  AZONOSITO KETTOSPONT
     {310, 1}, // 33: argumentum ->  kifejezes
     {310, 2}, // 34: argumentum (BYTE) ->  BYTE kifejezes
     {310, 2}, // 35: argumentum (WORD) ->  WORD kifejezes
     {310, 2}, // 36: argumentum (DWORD) ->  DWORD kifejezes
     {310, 3}, // 37: argumentum (NYITOSZOGZAROJEL) ->  NYITOSZOGZAROJEL kifejezes CSUKOSZOGZAROJEL
     {310, 4}, // 38: argumentum (BYTE) ->  BYTE NYITOSZOGZAROJEL kifejezes CSUKOSZOGZAROJEL
     {310, 4}, // 39: argumentum (WORD) ->  WORD NYITOSZOGZAROJEL kifejezes CSUKOSZOGZAROJEL
     {310, 4}, // 40: argumentum (DWORD) ->  DWORD NYITOSZOGZAROJEL kifejezes CSUKOSZOGZAROJEL
     {311, 3}, // 41: kifejezes (NYITOZAROJEL) ->  NYITOZAROJEL kifejezes CSUKOZAROJEL
     {311, 3}, // 42: kifejezes (MULTIPLY) ->  kifejezes MULTIPLY kifejezes
     {311, 3}, // 43: kifejezes (DIVIDE) ->  kifejezes DIVIDE kifejezes
     {311, 3}, // 44: kifejezes (PLUS) ->  kifejezes PLUS kifejezes
     {311, 3}, // 45: kifejezes (MINUS) ->  kifejezes MINUS kifejezes
     {311, 1}, // 46: kifejezes (REGISZTER) ->  REGISZTER
     {311, 1}, // 47: kifejezes (AZONOSITO) ->  AZONOSITO
     {311, 1}, // 48: kifejezes (SZAM) ->  SZAM
     {312, 1}, // 49: start_$ ->  start
};

// State info and SR__ transitions for each state.


SR__ const s_0[] =
{
    { { REQ_TOKEN}, { 7} },            
    { {       296}, { 1} }, // start   
    { {       297}, { 2} }, // szekciok
    { {       298}, { 3} }, // szekcio 
    { {       299}, { 4} }, // global  
    { {       260}, { 5} }, // SECTION 
    { {       259}, { 6} }, // GLOBAL  
    { {         0}, { 0} },            
};

SR__ const s_1[] =
{
    { { REQ_TOKEN}, {            2} }, 
    { {     _EOF_}, { PARSE_ACCEPT} }, 
    { {         0}, {            0} }, 
};

SR__ const s_2[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -1} }, 
};

SR__ const s_3[] =
{
    { { REQ_DEF}, {  6} },            
    { {     297}, {  7} }, // szekciok
    { {     298}, {  3} }, // szekcio 
    { {     299}, {  4} }, // global  
    { {     260}, {  5} }, // SECTION 
    { {     259}, {  6} }, // GLOBAL  
    { {       0}, { -3} },            
};

SR__ const s_4[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -4} }, 
};

SR__ const s_5[] =
{
    { { REQ_TOKEN}, {  4} },        
    { {       263}, {  8} }, // DATA
    { {       262}, {  9} }, // BSS 
    { {       261}, { 10} }, // TEXT
    { {         0}, {  0} },        
};

SR__ const s_6[] =
{
    { { REQ_TOKEN}, {  2} },             
    { {       258}, { 11} }, // AZONOSITO
    { {         0}, {  0} },             
};

SR__ const s_7[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -2} }, 
};

SR__ const s_8[] =
{
    { { REQ_TOKEN}, {  4} },                   
    { {       300}, { 12} }, // datadeklaraciok
    { {       303}, { 13} }, // datadecl       
    { {       258}, { 14} }, // AZONOSITO      
    { {         0}, {  0} },                   
};

SR__ const s_9[] =
{
    { { REQ_TOKEN}, {  4} },                  
    { {       301}, { 15} }, // bssdeklaraciok
    { {       304}, { 16} }, // bssdecl       
    { {       258}, { 17} }, // AZONOSITO     
    { {         0}, {  0} },                  
};

SR__ const s_10[] =
{
    { { REQ_TOKEN}, { 11} },                   
    { {       302}, { 18} }, // utasitasok     
    { {       299}, { 19} }, // global         
    { {       308}, { 20} }, // utasitas       
    { {       259}, {  6} }, // GLOBAL         
    { {       277}, { 21} }, // KETARGUMENTUMOS
    { {       278}, { 22} }, // EGYARGUMENTUMOS
    { {       279}, { 23} }, // UGROUTAS       
    { {       280}, { 24} }, // RET            
    { {       309}, { 25} }, // cimke          
    { {       258}, { 26} }, // AZONOSITO      
    { {         0}, {  0} },                   
};

SR__ const s_11[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -9} }, 
};

SR__ const s_12[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -5} }, 
};

SR__ const s_13[] =
{
    { { REQ_DEF}, {   4} },                   
    { {     300}, {  27} }, // datadeklaraciok
    { {     303}, {  13} }, // datadecl       
    { {     258}, {  14} }, // AZONOSITO      
    { {       0}, { -11} },                   
};

SR__ const s_14[] =
{
    { { REQ_TOKEN}, {  2} },              
    { {       284}, { 28} }, // KETTOSPONT
    { {         0}, {  0} },              
};

SR__ const s_15[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -6} }, 
};

SR__ const s_16[] =
{
    { { REQ_DEF}, {   4} },                  
    { {     301}, {  29} }, // bssdeklaraciok
    { {     304}, {  16} }, // bssdecl       
    { {     258}, {  17} }, // AZONOSITO     
    { {       0}, { -13} },                  
};

SR__ const s_17[] =
{
    { { REQ_TOKEN}, {  2} },              
    { {       284}, { 30} }, // KETTOSPONT
    { {         0}, {  0} },              
};

SR__ const s_18[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -7} }, 
};

SR__ const s_19[] =
{
    { { REQ_TOKEN}, {  9} },                   
    { {       302}, { 31} }, // utasitasok     
    { {       308}, { 20} }, // utasitas       
    { {       277}, { 21} }, // KETARGUMENTUMOS
    { {       278}, { 22} }, // EGYARGUMENTUMOS
    { {       279}, { 23} }, // UGROUTAS       
    { {       280}, { 24} }, // RET            
    { {       309}, { 25} }, // cimke          
    { {       258}, { 26} }, // AZONOSITO      
    { {         0}, {  0} },                   
};

SR__ const s_20[] =
{
    { { REQ_DEF}, {   9} },                   
    { {     302}, {  32} }, // utasitasok     
    { {     308}, {  20} }, // utasitas       
    { {     277}, {  21} }, // KETARGUMENTUMOS
    { {     278}, {  22} }, // EGYARGUMENTUMOS
    { {     279}, {  23} }, // UGROUTAS       
    { {     280}, {  24} }, // RET            
    { {     309}, {  25} }, // cimke          
    { {     258}, {  26} }, // AZONOSITO      
    { {       0}, { -25} },                   
};

SR__ const s_21[] =
{
    { { REQ_TOKEN}, { 11} },                    
    { {       310}, { 33} }, // argumentum      
    { {       311}, { 34} }, // kifejezes       
    { {       270}, { 35} }, // BYTE            
    { {       271}, { 36} }, // WORD            
    { {       272}, { 37} }, // DWORD           
    { {       275}, { 38} }, // NYITOSZOGZAROJEL
    { {       273}, { 39} }, // NYITOZAROJEL    
    { {       282}, { 40} }, // REGISZTER       
    { {       258}, { 41} }, // AZONOSITO       
    { {       257}, { 42} }, // SZAM            
    { {         0}, {  0} },                    
};

SR__ const s_22[] =
{
    { { REQ_TOKEN}, { 11} },                    
    { {       310}, { 43} }, // argumentum      
    { {       311}, { 34} }, // kifejezes       
    { {       270}, { 35} }, // BYTE            
    { {       271}, { 36} }, // WORD            
    { {       272}, { 37} }, // DWORD           
    { {       275}, { 38} }, // NYITOSZOGZAROJEL
    { {       273}, { 39} }, // NYITOZAROJEL    
    { {       282}, { 40} }, // REGISZTER       
    { {       258}, { 41} }, // AZONOSITO       
    { {       257}, { 42} }, // SZAM            
    { {         0}, {  0} },                    
};

SR__ const s_23[] =
{
    { { REQ_TOKEN}, {  3} },             
    { {       258}, { 44} }, // AZONOSITO
    { {       281}, { 45} }, // NEAR     
    { {         0}, {  0} },             
};

SR__ const s_24[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -30} }, 
};

SR__ const s_25[] =
{
    { { REQ_TOKEN}, {  8} },                   
    { {       308}, { 46} }, // utasitas       
    { {       277}, { 21} }, // KETARGUMENTUMOS
    { {       278}, { 22} }, // EGYARGUMENTUMOS
    { {       279}, { 23} }, // UGROUTAS       
    { {       280}, { 24} }, // RET            
    { {       309}, { 25} }, // cimke          
    { {       258}, { 26} }, // AZONOSITO      
    { {         0}, {  0} },                   
};

SR__ const s_26[] =
{
    { { REQ_TOKEN}, {  2} },              
    { {       284}, { 47} }, // KETTOSPONT
    { {         0}, {  0} },              
};

SR__ const s_27[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -10} }, 
};

SR__ const s_28[] =
{
    { { REQ_TOKEN}, {  5} },             
    { {       306}, { 48} }, // meretdata
    { {       267}, { 49} }, // DB       
    { {       268}, { 50} }, // DW       
    { {       269}, { 51} }, // DD       
    { {         0}, {  0} },             
};

SR__ const s_29[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -12} }, 
};

SR__ const s_30[] =
{
    { { REQ_TOKEN}, {  5} },            
    { {       307}, { 52} }, // meretbss
    { {       264}, { 53} }, // RESB    
    { {       265}, { 54} }, // RESW    
    { {       266}, { 55} }, // RESD    
    { {         0}, {  0} },            
};

SR__ const s_31[] =
{
    { { DEF_RED}, {  1} }, 
    { {       0}, { -8} }, 
};

SR__ const s_32[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -24} }, 
};

SR__ const s_33[] =
{
    { { REQ_TOKEN}, {  2} },          
    { {       283}, { 56} }, // VESSZO
    { {         0}, {  0} },          
};

SR__ const s_34[] =
{
    { { REQ_DEF}, {   5} },            
    { {     287}, {  57} }, // MULTIPLY
    { {     288}, {  58} }, // DIVIDE  
    { {     285}, {  59} }, // PLUS    
    { {     286}, {  60} }, // MINUS   
    { {       0}, { -33} },            
};

SR__ const s_35[] =
{
    { { REQ_TOKEN}, {  7} },                    
    { {       311}, { 61} }, // kifejezes       
    { {       275}, { 62} }, // NYITOSZOGZAROJEL
    { {       273}, { 39} }, // NYITOZAROJEL    
    { {       282}, { 40} }, // REGISZTER       
    { {       258}, { 41} }, // AZONOSITO       
    { {       257}, { 42} }, // SZAM            
    { {         0}, {  0} },                    
};

SR__ const s_36[] =
{
    { { REQ_TOKEN}, {  7} },                    
    { {       311}, { 63} }, // kifejezes       
    { {       275}, { 64} }, // NYITOSZOGZAROJEL
    { {       273}, { 39} }, // NYITOZAROJEL    
    { {       282}, { 40} }, // REGISZTER       
    { {       258}, { 41} }, // AZONOSITO       
    { {       257}, { 42} }, // SZAM            
    { {         0}, {  0} },                    
};

SR__ const s_37[] =
{
    { { REQ_TOKEN}, {  7} },                    
    { {       311}, { 65} }, // kifejezes       
    { {       275}, { 66} }, // NYITOSZOGZAROJEL
    { {       273}, { 39} }, // NYITOZAROJEL    
    { {       282}, { 40} }, // REGISZTER       
    { {       258}, { 41} }, // AZONOSITO       
    { {       257}, { 42} }, // SZAM            
    { {         0}, {  0} },                    
};

SR__ const s_38[] =
{
    { { REQ_TOKEN}, {  6} },                
    { {       311}, { 67} }, // kifejezes   
    { {       273}, { 39} }, // NYITOZAROJEL
    { {       282}, { 40} }, // REGISZTER   
    { {       258}, { 41} }, // AZONOSITO   
    { {       257}, { 42} }, // SZAM        
    { {         0}, {  0} },                
};

SR__ const s_39[] =
{
    { { REQ_TOKEN}, {  6} },                
    { {       311}, { 68} }, // kifejezes   
    { {       273}, { 39} }, // NYITOZAROJEL
    { {       282}, { 40} }, // REGISZTER   
    { {       258}, { 41} }, // AZONOSITO   
    { {       257}, { 42} }, // SZAM        
    { {         0}, {  0} },                
};

SR__ const s_40[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -46} }, 
};

SR__ const s_41[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -47} }, 
};

SR__ const s_42[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -48} }, 
};

SR__ const s_43[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -27} }, 
};

SR__ const s_44[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -28} }, 
};

SR__ const s_45[] =
{
    { { REQ_TOKEN}, {  2} },             
    { {       258}, { 69} }, // AZONOSITO
    { {         0}, {  0} },             
};

SR__ const s_46[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -31} }, 
};

SR__ const s_47[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -32} }, 
};

SR__ const s_48[] =
{
    { { REQ_TOKEN}, {  3} },          
    { {       305}, { 70} }, // szamok
    { {       257}, { 71} }, // SZAM  
    { {         0}, {  0} },          
};

SR__ const s_49[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -18} }, 
};

SR__ const s_50[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -19} }, 
};

SR__ const s_51[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -20} }, 
};

SR__ const s_52[] =
{
    { { REQ_TOKEN}, {  2} },        
    { {       257}, { 72} }, // SZAM
    { {         0}, {  0} },        
};

SR__ const s_53[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -21} }, 
};

SR__ const s_54[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -22} }, 
};

SR__ const s_55[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -23} }, 
};

SR__ const s_56[] =
{
    { { REQ_TOKEN}, { 11} },                    
    { {       310}, { 73} }, // argumentum      
    { {       311}, { 34} }, // kifejezes       
    { {       270}, { 35} }, // BYTE            
    { {       271}, { 36} }, // WORD            
    { {       272}, { 37} }, // DWORD           
    { {       275}, { 38} }, // NYITOSZOGZAROJEL
    { {       273}, { 39} }, // NYITOZAROJEL    
    { {       282}, { 40} }, // REGISZTER       
    { {       258}, { 41} }, // AZONOSITO       
    { {       257}, { 42} }, // SZAM            
    { {         0}, {  0} },                    
};

SR__ const s_57[] =
{
    { { REQ_TOKEN}, {  6} },                
    { {       311}, { 74} }, // kifejezes   
    { {       273}, { 39} }, // NYITOZAROJEL
    { {       282}, { 40} }, // REGISZTER   
    { {       258}, { 41} }, // AZONOSITO   
    { {       257}, { 42} }, // SZAM        
    { {         0}, {  0} },                
};

SR__ const s_58[] =
{
    { { REQ_TOKEN}, {  6} },                
    { {       311}, { 75} }, // kifejezes   
    { {       273}, { 39} }, // NYITOZAROJEL
    { {       282}, { 40} }, // REGISZTER   
    { {       258}, { 41} }, // AZONOSITO   
    { {       257}, { 42} }, // SZAM        
    { {         0}, {  0} },                
};

SR__ const s_59[] =
{
    { { REQ_TOKEN}, {  6} },                
    { {       311}, { 76} }, // kifejezes   
    { {       273}, { 39} }, // NYITOZAROJEL
    { {       282}, { 40} }, // REGISZTER   
    { {       258}, { 41} }, // AZONOSITO   
    { {       257}, { 42} }, // SZAM        
    { {         0}, {  0} },                
};

SR__ const s_60[] =
{
    { { REQ_TOKEN}, {  6} },                
    { {       311}, { 77} }, // kifejezes   
    { {       273}, { 39} }, // NYITOZAROJEL
    { {       282}, { 40} }, // REGISZTER   
    { {       258}, { 41} }, // AZONOSITO   
    { {       257}, { 42} }, // SZAM        
    { {         0}, {  0} },                
};

SR__ const s_61[] =
{
    { { REQ_DEF}, {   5} },            
    { {     287}, {  57} }, // MULTIPLY
    { {     288}, {  58} }, // DIVIDE  
    { {     285}, {  59} }, // PLUS    
    { {     286}, {  60} }, // MINUS   
    { {       0}, { -34} },            
};

SR__ const s_62[] =
{
    { { REQ_TOKEN}, {  6} },                
    { {       311}, { 78} }, // kifejezes   
    { {       273}, { 39} }, // NYITOZAROJEL
    { {       282}, { 40} }, // REGISZTER   
    { {       258}, { 41} }, // AZONOSITO   
    { {       257}, { 42} }, // SZAM        
    { {         0}, {  0} },                
};

SR__ const s_63[] =
{
    { { REQ_DEF}, {   5} },            
    { {     287}, {  57} }, // MULTIPLY
    { {     288}, {  58} }, // DIVIDE  
    { {     285}, {  59} }, // PLUS    
    { {     286}, {  60} }, // MINUS   
    { {       0}, { -35} },            
};

SR__ const s_64[] =
{
    { { REQ_TOKEN}, {  6} },                
    { {       311}, { 79} }, // kifejezes   
    { {       273}, { 39} }, // NYITOZAROJEL
    { {       282}, { 40} }, // REGISZTER   
    { {       258}, { 41} }, // AZONOSITO   
    { {       257}, { 42} }, // SZAM        
    { {         0}, {  0} },                
};

SR__ const s_65[] =
{
    { { REQ_DEF}, {   5} },            
    { {     287}, {  57} }, // MULTIPLY
    { {     288}, {  58} }, // DIVIDE  
    { {     285}, {  59} }, // PLUS    
    { {     286}, {  60} }, // MINUS   
    { {       0}, { -36} },            
};

SR__ const s_66[] =
{
    { { REQ_TOKEN}, {  6} },                
    { {       311}, { 80} }, // kifejezes   
    { {       273}, { 39} }, // NYITOZAROJEL
    { {       282}, { 40} }, // REGISZTER   
    { {       258}, { 41} }, // AZONOSITO   
    { {       257}, { 42} }, // SZAM        
    { {         0}, {  0} },                
};

SR__ const s_67[] =
{
    { { REQ_TOKEN}, {  6} },                    
    { {       276}, { 81} }, // CSUKOSZOGZAROJEL
    { {       287}, { 57} }, // MULTIPLY        
    { {       288}, { 58} }, // DIVIDE          
    { {       285}, { 59} }, // PLUS            
    { {       286}, { 60} }, // MINUS           
    { {         0}, {  0} },                    
};

SR__ const s_68[] =
{
    { { REQ_TOKEN}, {  6} },                
    { {       274}, { 82} }, // CSUKOZAROJEL
    { {       287}, { 57} }, // MULTIPLY    
    { {       288}, { 58} }, // DIVIDE      
    { {       285}, { 59} }, // PLUS        
    { {       286}, { 60} }, // MINUS       
    { {         0}, {  0} },                
};

SR__ const s_69[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -29} }, 
};

SR__ const s_70[] =
{
    { { REQ_DEF}, {   2} },          
    { {     283}, {  83} }, // VESSZO
    { {       0}, { -14} },          
};

SR__ const s_71[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -16} }, 
};

SR__ const s_72[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -17} }, 
};

SR__ const s_73[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -26} }, 
};

SR__ const s_74[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -42} }, 
};

SR__ const s_75[] =
{
    { { REQ_DEF}, {   1} }, 
    { {       0}, { -43} }, 
};

SR__ const s_76[] =
{
    { { REQ_DEF}, {   3} },            
    { {     287}, {  57} }, // MULTIPLY
    { {     288}, {  58} }, // DIVIDE  
    { {       0}, { -44} },            
};

SR__ const s_77[] =
{
    { { REQ_DEF}, {   3} },            
    { {     287}, {  57} }, // MULTIPLY
    { {     288}, {  58} }, // DIVIDE  
    { {       0}, { -45} },            
};

SR__ const s_78[] =
{
    { { REQ_TOKEN}, {  6} },                    
    { {       276}, { 84} }, // CSUKOSZOGZAROJEL
    { {       287}, { 57} }, // MULTIPLY        
    { {       288}, { 58} }, // DIVIDE          
    { {       285}, { 59} }, // PLUS            
    { {       286}, { 60} }, // MINUS           
    { {         0}, {  0} },                    
};

SR__ const s_79[] =
{
    { { REQ_TOKEN}, {  6} },                    
    { {       276}, { 85} }, // CSUKOSZOGZAROJEL
    { {       287}, { 57} }, // MULTIPLY        
    { {       288}, { 58} }, // DIVIDE          
    { {       285}, { 59} }, // PLUS            
    { {       286}, { 60} }, // MINUS           
    { {         0}, {  0} },                    
};

SR__ const s_80[] =
{
    { { REQ_TOKEN}, {  6} },                    
    { {       276}, { 86} }, // CSUKOSZOGZAROJEL
    { {       287}, { 57} }, // MULTIPLY        
    { {       288}, { 58} }, // DIVIDE          
    { {       285}, { 59} }, // PLUS            
    { {       286}, { 60} }, // MINUS           
    { {         0}, {  0} },                    
};

SR__ const s_81[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -37} }, 
};

SR__ const s_82[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -41} }, 
};

SR__ const s_83[] =
{
    { { REQ_TOKEN}, {  2} },        
    { {       257}, { 87} }, // SZAM
    { {         0}, {  0} },        
};

SR__ const s_84[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -38} }, 
};

SR__ const s_85[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -39} }, 
};

SR__ const s_86[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -40} }, 
};

SR__ const s_87[] =
{
    { { DEF_RED}, {   1} }, 
    { {       0}, { -15} }, 
};


// State array:
SR__ const *s_state[] =
{
  s_0,  s_1,  s_2,  s_3,  s_4,  s_5,  s_6,  s_7,  s_8,  s_9,
  s_10,  s_11,  s_12,  s_13,  s_14,  s_15,  s_16,  s_17,  s_18,  s_19,
  s_20,  s_21,  s_22,  s_23,  s_24,  s_25,  s_26,  s_27,  s_28,  s_29,
  s_30,  s_31,  s_32,  s_33,  s_34,  s_35,  s_36,  s_37,  s_38,  s_39,
  s_40,  s_41,  s_42,  s_43,  s_44,  s_45,  s_46,  s_47,  s_48,  s_49,
  s_50,  s_51,  s_52,  s_53,  s_54,  s_55,  s_56,  s_57,  s_58,  s_59,
  s_60,  s_61,  s_62,  s_63,  s_64,  s_65,  s_66,  s_67,  s_68,  s_69,
  s_70,  s_71,  s_72,  s_73,  s_74,  s_75,  s_76,  s_77,  s_78,  s_79,
  s_80,  s_81,  s_82,  s_83,  s_84,  s_85,  s_86,  s_87,
};

} // anonymous namespace ends



// If the parsing function call uses arguments, then provide an overloaded
// function.  The code below doesn't rely on parameters, so no arguments are
// required.  Furthermore, parse uses a function try block to allow us to do
// ACCEPT and ABORT from anywhere, even from within members called by actions,
// simply throwing the appropriate exceptions.

elsoparseParserBase::elsoparseParserBase()
:
    d_stackIdx__(-1),
    // $insert debuginit
    d_debug__(false),
    d_nErrors__(0),
    // $insert requiredtokens
    d_requiredTokens__(0),
    d_acceptedTokens__(d_requiredTokens__),
    d_token__(_UNDETERMINED_),
    d_nextToken__(_UNDETERMINED_)
{}


void elsoparseParser::print__()
{
// $insert print
}

void elsoparseParserBase::clearin()
{
    d_token__ = d_nextToken__ = _UNDETERMINED_;
}

void elsoparseParserBase::push__(size_t state)
{
    if (static_cast<size_t>(d_stackIdx__ + 1) == d_stateStack__.size())
    {
        size_t newSize = d_stackIdx__ + STACK_EXPANSION;
        d_stateStack__.resize(newSize);
        d_valueStack__.resize(newSize);
        // $insert LTYPEresize
        d_locationStack__.resize(newSize);
    }
    ++d_stackIdx__;
    d_stateStack__[d_stackIdx__] = d_state__ = state;
    *(d_vsp__ = &d_valueStack__[d_stackIdx__]) = d_val__;
    // $insert LTYPEpush
    *(d_lsp__ = &d_locationStack__[d_stackIdx__]) = d_loc__;
}

void elsoparseParserBase::popToken__()
{
    d_token__ = d_nextToken__;

    d_val__ = d_nextVal__;
    d_nextVal__ = STYPE__();

    d_nextToken__ = _UNDETERMINED_;
}
     
void elsoparseParserBase::pushToken__(int token)
{
    d_nextToken__ = d_token__;
    d_nextVal__ = d_val__;
    d_token__ = token;
}
     
void elsoparseParserBase::pop__(size_t count)
{
    if (d_stackIdx__ < static_cast<int>(count))
    {
        ABORT();
    }

    d_stackIdx__ -= count;
    d_state__ = d_stateStack__[d_stackIdx__];
    d_vsp__ = &d_valueStack__[d_stackIdx__];
    // $insert LTYPEpop
    d_lsp__ = &d_locationStack__[d_stackIdx__];
}

inline size_t elsoparseParserBase::top__() const
{
    return d_stateStack__[d_stackIdx__];
}

void elsoparseParser::executeAction(int production)
try
{
    if (d_token__ != _UNDETERMINED_)
        pushToken__(d_token__);     // save an already available token

                                    // save default non-nested block $$
    if (int size = s_productionInfo[production].d_size)
        d_val__ = d_vsp__[1 - size];

    switch (production)
    {
        // $insert actioncases
        
        case 9:
#line 90 "elsoparse.y"
        {
         if (elsoutasitas_cimke != "")
         {
         std::stringstream ss;
         ss << d_loc__.first_line << ". sor: " << "global belepesi pont ismetles" << std::endl
         << "\telozo nev: " << elsoutasitas_cimke << std::endl
         << "\tmost talalt nev: " << *d_vsp__[0].szoveg << std::endl;
         errorMsg = ss.str();
         
         delete d_vsp__[0].szoveg;
         throw HIBA;
         }
         elsoutasitas_cimke = *d_vsp__[0].szoveg;
         delete d_vsp__[0].szoveg;
         }
        break;

        case 14:
#line 121 "elsoparse.y"
        {
         int meret = (*d_vsp__[-1].szam);
         int pluszdb = d_vsp__[0].intvec->size();
         int pluszhossz = meret * pluszdb;
         int mosthossz = valtozok.size();
         
         std::vector<AP_UC> vec(meret);
         
         valtozok.resize(mosthossz + pluszhossz, 0);
         for (int i = 0; i < pluszdb; ++i)
         {
         Utils::uint2vecc( (*d_vsp__[0].intvec)[i] , vec );
         for (int j = 0; j < meret; ++j)
         {
         valtozok[mosthossz + i * meret + j] = vec[j];
         }
         }
         valtozo_kezdetek[*d_vsp__[-3].szoveg] = mosthossz;
         
         delete d_vsp__[-3].szoveg;
         delete d_vsp__[-1].szam;
         delete d_vsp__[0].intvec;
         }
        break;

        case 15:
#line 148 "elsoparse.y"
        {
         d_vsp__[-2].intvec->push_back(atoi(d_vsp__[0].szoveg->c_str()));
         d_val__.intvec = d_vsp__[-2].intvec;
         
         delete d_vsp__[0].szoveg;
         }
        break;

        case 16:
#line 156 "elsoparse.y"
        {
         d_val__.intvec = new std::vector<int>(1, atoi(d_vsp__[0].szoveg->c_str()));
         
         delete d_vsp__[0].szoveg;
         }
        break;

        case 17:
#line 165 "elsoparse.y"
        {
         int pluszhossz = (*d_vsp__[-1].szam) * atoi(d_vsp__[0].szoveg->c_str());
         int mosthossz = valtozok.size();
         
         valtozok.resize(mosthossz + pluszhossz, 0);
         valtozo_kezdetek[*d_vsp__[-3].szoveg] = mosthossz;
         
         delete d_vsp__[-3].szoveg;
         delete d_vsp__[-1].szam;
         delete d_vsp__[0].szoveg;
         }
        break;

        case 18:
#line 180 "elsoparse.y"
        {
         d_val__.szam = new int(1);
         }
        break;

        case 19:
#line 185 "elsoparse.y"
        {
         d_val__.szam = new int(2);
         }
        break;

        case 20:
#line 190 "elsoparse.y"
        {
         d_val__.szam = new int(4);
         }
        break;

        case 21:
#line 197 "elsoparse.y"
        {
         d_val__.szam = new int(1);
         }
        break;

        case 22:
#line 202 "elsoparse.y"
        {
         d_val__.szam = new int(2);
         }
        break;

        case 23:
#line 207 "elsoparse.y"
        {
         d_val__.szam = new int(4);
         }
        break;

        case 24:
#line 214 "elsoparse.y"
        {
         utasitas_gyujto[d_vsp__[-1].utas->utasitassorszam] = *d_vsp__[-1].utas;
         
         delete d_vsp__[-1].utas;
         }
        break;

        case 25:
#line 221 "elsoparse.y"
        {
         utasitas_gyujto[d_vsp__[0].utas->utasitassorszam] = *d_vsp__[0].utas;
         
         delete d_vsp__[0].utas;
         }
        break;

        case 26:
#line 230 "elsoparse.y"
        {
         int argm;
         if (d_vsp__[-2].kif->argmeret == -1 && d_vsp__[0].kif->argmeret == -1)
         {
         std::stringstream ss;
         ss << d_loc__.first_line << ". sor: " << "muvelet meg nem adott argumentummerettel" << std::endl
         << "\t" << (std::string("") + *d_vsp__[-3].szoveg + " " + d_vsp__[-2].kif->kif + ", " + d_vsp__[0].kif->kif) << std::endl;
         errorMsg = ss.str();
         
         delete d_vsp__[-3].szoveg;
         delete d_vsp__[-2].kif;
         delete d_vsp__[0].kif;
         throw HIBA;
         } else if (d_vsp__[-2].kif->argmeret != d_vsp__[0].kif->argmeret && d_vsp__[-2].kif->argmeret != -1 && d_vsp__[0].kif->argmeret != -1)
         {
         std::stringstream ss;
         ss << d_loc__.first_line << ". sor: " << "muvelet eltero argumentummerettel" << std::endl
         << "\t" << (std::string("") + toLower(*d_vsp__[-3].szoveg) + " " + d_vsp__[-2].kif->kif + ", " + d_vsp__[0].kif->kif) << std::endl
         << "\telso argumentum merete: " << d_vsp__[-2].kif->argmeret << " byte" << std::endl
         << "\tmasodik argumentum merete: " << d_vsp__[0].kif->argmeret << " byte" << std::endl;
         errorMsg = ss.str();
         
         delete d_vsp__[-3].szoveg;
         delete d_vsp__[-2].kif;
         delete d_vsp__[0].kif;
         throw HIBA;
         } else
         {
         argm = (d_vsp__[-2].kif->argmeret == -1) ? (d_vsp__[0].kif->argmeret) : (d_vsp__[-2].kif->argmeret);
         }
         
         d_val__.utas = new utasitas_data( std::string("") + *d_vsp__[-3].szoveg + " " + d_vsp__[-2].kif->kif + ", " + d_vsp__[0].kif->kif, d_loc__.first_line, utasitasszam++, argm);
         
         delete d_vsp__[-3].szoveg;
         delete d_vsp__[-2].kif;
         delete d_vsp__[0].kif;
         }
        break;

        case 27:
#line 269 "elsoparse.y"
        {
         if (d_vsp__[0].kif->argmeret == -1)
         {
         std::stringstream ss;
         ss << d_loc__.first_line << ". sor: " << "muvelet meg nem adott argumentummerettel" << std::endl
         << "\t" <<(std::string("") + toLower(*d_vsp__[-1].szoveg) + " " + d_vsp__[0].kif->kif) << std::endl;
         errorMsg = ss.str();
         
         delete d_vsp__[-1].szoveg;
         delete d_vsp__[0].kif;
         throw HIBA;
         }
         d_val__.utas = new utasitas_data( *d_vsp__[-1].szoveg + " " + d_vsp__[0].kif->kif, d_loc__.first_line, utasitasszam++, d_vsp__[0].kif->argmeret);
         
         delete d_vsp__[-1].szoveg;
         delete d_vsp__[0].kif;
         }
        break;

        case 28:
#line 288 "elsoparse.y"
        {
         if ( ugrocimke_kovutasitas.count(*d_vsp__[0].szoveg) == 0 )
         {
         ugrocimke_kovutasitas[ *d_vsp__[0].szoveg ] = -1;
         }
         d_val__.utas = new utasitas_data( *d_vsp__[-1].szoveg + " " + (*d_vsp__[0].szoveg), d_loc__.first_line, utasitasszam++, 4);
         
         delete d_vsp__[-1].szoveg;
         delete d_vsp__[0].szoveg;
         }
        break;

        case 29:
#line 300 "elsoparse.y"
        {
         if ( ugrocimke_kovutasitas.count(*d_vsp__[0].szoveg) == 0 )
         {
         ugrocimke_kovutasitas[ *d_vsp__[0].szoveg ] = -1;
         }
         d_val__.utas = new utasitas_data( toLower(*d_vsp__[-2].szoveg) + " near " + (*d_vsp__[0].szoveg), d_loc__.first_line, utasitasszam++, 4);
         
         delete d_vsp__[-2].szoveg;
         delete d_vsp__[0].szoveg;
         }
        break;

        case 30:
#line 312 "elsoparse.y"
        {
         d_val__.utas = new utasitas_data( "ret", d_loc__.first_line, utasitasszam++, 0);
         
         delete d_vsp__[0].szoveg;
         }
        break;

        case 31:
#line 319 "elsoparse.y"
        {
         d_val__.utas = d_vsp__[0].utas;
         }
        break;

        case 32:
#line 326 "elsoparse.y"
        {
         if ( ugrocimke_kovutasitas.count(*d_vsp__[-1].szoveg) > 0 && ugrocimke_kovutasitas[*d_vsp__[-1].szoveg] != -1)
         {
         std::stringstream ss;
         ss << d_loc__.first_line << ". sor: " << "ujradefinialt ugras cimke" << std::endl
         << "\t" << *d_vsp__[-1].szoveg << std::endl;
         errorMsg = ss.str();
         
         delete d_vsp__[-1].szoveg;
         throw HIBA;
         }
         ugrocimke_kovutasitas[*d_vsp__[-1].szoveg] = utasitasszam;
         
         delete d_vsp__[-1].szoveg;
         }
        break;

        case 33:
#line 345 "elsoparse.y"
        {
         d_val__.kif = d_vsp__[0].kif;
         }
        break;

        case 34:
#line 350 "elsoparse.y"
        {
         if ( d_vsp__[0].kif->argmeret != 1 && d_vsp__[0].kif->argmeret != -1)
         {
         std::stringstream ss;
         ss << d_loc__.first_line << ". sor: " << "eltero argumentummeret megadas" << std::endl
         << "\t" << d_vsp__[0].kif->argmeret << " != 1" << std::endl;
         errorMsg = ss.str();
         
         delete d_vsp__[0].kif;
         throw HIBA;
         }
         d_val__.kif = new kifejezes_data( "byte " + d_vsp__[0].kif->kif, 1);
         
         delete d_vsp__[0].kif;
         }
        break;

        case 35:
#line 367 "elsoparse.y"
        {
         if ( d_vsp__[0].kif->argmeret != 2 && d_vsp__[0].kif->argmeret != -1)
         {
         std::stringstream ss;
         ss << d_loc__.first_line << ". sor: " << "eltero argumentummeret megadas" << std::endl
         << "\t" << d_vsp__[0].kif->argmeret << " != 2" << std::endl;
         errorMsg = ss.str();
         
         delete d_vsp__[0].kif;
         throw HIBA;
         }
         d_val__.kif = new kifejezes_data( "word " + d_vsp__[0].kif->kif, 2);
         
         delete d_vsp__[0].kif;
         }
        break;

        case 36:
#line 384 "elsoparse.y"
        {
         if ( d_vsp__[0].kif->argmeret != 4 && d_vsp__[0].kif->argmeret != -1)
         {
         std::stringstream ss;
         ss << d_loc__.first_line << ". sor: " << "eltero argumentummeret megadas" << std::endl
         << "\t" << d_vsp__[0].kif->argmeret << " != 4" << std::endl;
         errorMsg = ss.str();
         
         delete d_vsp__[0].kif;
         throw HIBA;
         }
         d_val__.kif = new kifejezes_data( "dword " + d_vsp__[0].kif->kif, 4);
         
         delete d_vsp__[0].kif;
         }
        break;

        case 37:
#line 401 "elsoparse.y"
        {
         d_val__.kif = new kifejezes_data("[ " + d_vsp__[-1].kif->kif + " ]", -1);
         delete d_vsp__[-1].kif;
         }
        break;

        case 38:
#line 407 "elsoparse.y"
        {
         d_val__.kif = new kifejezes_data("byte [ " + d_vsp__[-1].kif->kif + " ]", 1);
         delete d_vsp__[-1].kif;
         }
        break;

        case 39:
#line 413 "elsoparse.y"
        {
         d_val__.kif = new kifejezes_data("word [ " + d_vsp__[-1].kif->kif + " ]", 2);
         delete d_vsp__[-1].kif;
         }
        break;

        case 40:
#line 419 "elsoparse.y"
        {
         d_val__.kif = new kifejezes_data("dword [ " + d_vsp__[-1].kif->kif + " ]", 4);
         delete d_vsp__[-1].kif;
         }
        break;

        case 41:
#line 427 "elsoparse.y"
        {
         d_val__.kif = new kifejezes_data("( " + d_vsp__[-1].kif->kif + " )", d_vsp__[-1].kif->argmeret);
         
         delete d_vsp__[-1].kif;
         }
        break;

        case 42:
#line 434 "elsoparse.y"
        {
         int argm;
         if (d_vsp__[-2].kif->argmeret != -1 && d_vsp__[0].kif->argmeret != -1 && d_vsp__[-2].kif->argmeret != d_vsp__[0].kif->argmeret)
         {
         std::stringstream ss;
         ss << d_loc__.first_line << ". sor: " << "szorzas muvelet eltero argumentummerettel" << std::endl
         << "\t" << (std::string("") + d_vsp__[-2].kif->kif + " * " + d_vsp__[0].kif->kif) << std::endl
         << "\telso argumentum merete: " << d_vsp__[-2].kif->argmeret << " byte" << std::endl
         << "\tmasodik argumentum merete: " << d_vsp__[0].kif->argmeret << " byte" << std::endl;
         errorMsg = ss.str();
         
         delete d_vsp__[-2].kif;
         delete d_vsp__[0].kif;
         throw HIBA;
         } else
         {
         argm = (d_vsp__[-2].kif->argmeret == -1) ? (d_vsp__[0].kif->argmeret) : (d_vsp__[-2].kif->argmeret);
         }
         d_val__.kif = new kifejezes_data(d_vsp__[-2].kif->kif + " * " + d_vsp__[0].kif->kif, argm);
         
         delete d_vsp__[-2].kif;
         delete d_vsp__[0].kif;
         }
        break;

        case 43:
#line 459 "elsoparse.y"
        {
         int argm;
         if (d_vsp__[-2].kif->argmeret != -1 && d_vsp__[0].kif->argmeret != -1 && d_vsp__[-2].kif->argmeret != d_vsp__[0].kif->argmeret)
         {
         std::stringstream ss;
         ss << d_loc__.first_line << ". sor: " << "osztas muvelet eltero argumentummerettel" << std::endl
         << "\t" << (std::string("") + d_vsp__[-2].kif->kif + " / " + d_vsp__[0].kif->kif) << std::endl
         << "\telso argumentum merete: " << d_vsp__[-2].kif->argmeret << " byte" << std::endl
         << "\tmasodik argumentum merete: " << d_vsp__[0].kif->argmeret << " byte" << std::endl;
         errorMsg = ss.str();
         
         delete d_vsp__[-2].kif;
         delete d_vsp__[0].kif;
         throw HIBA;
         } else
         {
         argm = (d_vsp__[-2].kif->argmeret == -1) ? (d_vsp__[0].kif->argmeret) : (d_vsp__[-2].kif->argmeret);
         }
         d_val__.kif = new kifejezes_data(d_vsp__[-2].kif->kif + " / " + d_vsp__[0].kif->kif, argm);
         
         delete d_vsp__[-2].kif;
         delete d_vsp__[0].kif;
         }
        break;

        case 44:
#line 484 "elsoparse.y"
        {
         int argm;
         if (d_vsp__[-2].kif->argmeret != -1 && d_vsp__[0].kif->argmeret != -1 && d_vsp__[-2].kif->argmeret != d_vsp__[0].kif->argmeret)
         {
         std::stringstream ss;
         ss << d_loc__.first_line << ". sor: " << "osszeadas muvelet eltero argumentummerettel" << std::endl
         << "\t" << (std::string("") + d_vsp__[-2].kif->kif + " + " + d_vsp__[0].kif->kif) << std::endl
         << "\telso argumentum merete: " << d_vsp__[-2].kif->argmeret << " byte" << std::endl
         << "\tmasodik argumentum merete: " << d_vsp__[0].kif->argmeret << " byte" << std::endl;
         errorMsg = ss.str();
         
         delete d_vsp__[-2].kif;
         delete d_vsp__[0].kif;
         throw HIBA;
         } else
         {
         argm = (d_vsp__[-2].kif->argmeret == -1) ? (d_vsp__[0].kif->argmeret) : (d_vsp__[-2].kif->argmeret);
         }
         d_val__.kif = new kifejezes_data(d_vsp__[-2].kif->kif + " + " + d_vsp__[0].kif->kif, argm);
         
         delete d_vsp__[-2].kif;
         delete d_vsp__[0].kif;
         }
        break;

        case 45:
#line 509 "elsoparse.y"
        {
         int argm;
         if (d_vsp__[-2].kif->argmeret != -1 && d_vsp__[0].kif->argmeret != -1 && d_vsp__[-2].kif->argmeret != d_vsp__[0].kif->argmeret)
         {
         std::stringstream ss;
         ss << d_loc__.first_line << ". sor: " << "kivonas muvelet eltero argumentummerettel" << std::endl
         << "\t" << (std::string("") + d_vsp__[-2].kif->kif + " - " + d_vsp__[0].kif->kif) << std::endl
         << "\telso argumentum merete: " << d_vsp__[-2].kif->argmeret << " byte" << std::endl
         << "\tmasodik argumentum merete: " << d_vsp__[0].kif->argmeret << " byte" << std::endl;
         errorMsg = ss.str();
         
         delete d_vsp__[-2].kif;
         delete d_vsp__[0].kif;
         throw HIBA;
         } else
         {
         argm = (d_vsp__[-2].kif->argmeret == -1) ? (d_vsp__[0].kif->argmeret) : (d_vsp__[-2].kif->argmeret);
         }
         d_val__.kif = new kifejezes_data(d_vsp__[-2].kif->kif + " - " + d_vsp__[0].kif->kif, argm);
         
         delete d_vsp__[-2].kif;
         delete d_vsp__[0].kif;
         }
        break;

        case 46:
#line 534 "elsoparse.y"
        {
         int argm;
         argm = getRegSize(*d_vsp__[0].szoveg);
         
         d_val__.kif = new kifejezes_data( toLower(*d_vsp__[0].szoveg), argm);
         delete d_vsp__[0].szoveg;
         }
        break;

        case 47:
#line 543 "elsoparse.y"
        {
         if ( valtozo_kezdetek.count(*d_vsp__[0].szoveg) == 0)
         {
         valtozo_kezdetek[ *d_vsp__[0].szoveg ] = -1;
         }
         d_val__.kif = new kifejezes_data(*d_vsp__[0].szoveg, -1);
         delete d_vsp__[0].szoveg;
         }
        break;

        case 48:
#line 553 "elsoparse.y"
        {
         d_val__.kif = new kifejezes_data(*d_vsp__[0].szoveg, -1);
         delete d_vsp__[0].szoveg;
         }
        break;

    }
}
catch (std::exception const &exc)
{
    exceptionHandler__(exc);
}

inline void elsoparseParserBase::reduce__(PI__ const &pi)
{
    d_token__ = pi.d_nonTerm;
    pop__(pi.d_size);

}

// If d_token__ is _UNDETERMINED_ then if d_nextToken__ is _UNDETERMINED_ another
// token is obtained from lex(). Then d_nextToken__ is assigned to d_token__.
void elsoparseParser::nextToken()
{
    if (d_token__ != _UNDETERMINED_)        // no need for a token: got one
        return;                             // already

    if (d_nextToken__ != _UNDETERMINED_)
    {
        popToken__();                       // consume pending token
    }
    else
    {
        ++d_acceptedTokens__;               // accept another token (see
                                            // errorRecover())
        d_token__ = lex();
        if (d_token__ <= 0)
            d_token__ = _EOF_;
    }
    print();
}

// if the final transition is negative, then we should reduce by the rule
// given by its positive value. Note that the `recovery' parameter is only
// used with the --debug option
int elsoparseParser::lookup(bool recovery)
{
// $insert threading
    SR__ const *sr = s_state[d_state__];    // get the appropriate state-table
    int lastIdx = sr->d_lastIdx;            // sentinel-index in the SR_ array
    
    SR__ const *lastElementPtr = sr + lastIdx;
    SR__ const *elementPtr = sr + 1;        // start the search at s_xx[1]
    
    while (elementPtr != lastElementPtr && elementPtr->d_token != d_token__)
        ++elementPtr;
    

    if (elementPtr == lastElementPtr)   // reached the last element
    {
        if (elementPtr->d_action < 0)   // default reduction
        {
            return elementPtr->d_action;                
        }

        // No default reduction, so token not found, so error.
        throw UNEXPECTED_TOKEN__;
    }

    // not at the last element: inspect the nature of the action
    // (< 0: reduce, 0: ACCEPT, > 0: shift)

    int action = elementPtr->d_action;


    return action;
}

    // When an error has occurred, pop elements off the stack until the top
    // state has an error-item. If none is found, the default recovery
    // mode (which is to abort) is activated. 
    //
    // If EOF is encountered without being appropriate for the current state,
    // then the error recovery will fall back to the default recovery mode.
    // (i.e., parsing terminates)
void elsoparseParser::errorRecovery()
try
{
    if (d_acceptedTokens__ >= d_requiredTokens__)// only generate an error-
    {                                           // message if enough tokens 
        ++d_nErrors__;                          // were accepted. Otherwise
        error("Syntax error");                  // simply skip input

    }


    // get the error state
    while (not (s_state[top__()][0].d_type & ERR_ITEM))
    {
        pop__();
    }

    // In the error state, lookup a token allowing us to proceed.
    // Continuation may be possible following multiple reductions,
    // but eventuall a shift will be used, requiring the retrieval of
    // a terminal token. If a retrieved token doesn't match, the catch below 
    // will ensure the next token is requested in the while(true) block
    // implemented below:

    int lastToken = d_token__;                  // give the unexpected token a
                                                // chance to be processed
                                                // again.

    pushToken__(_error_);                       // specify _error_ as next token
    push__(lookup(true));                       // push the error state

    d_token__ = lastToken;                      // reactivate the unexpected
                                                // token (we're now in an
                                                // ERROR state).

    bool gotToken = true;                       // the next token is a terminal

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
            {
                gotToken = d_token__ == _UNDETERMINED_;
                nextToken();                    // obtain next token
            }
            
            int action = lookup(true);

            if (action > 0)                 // push a new state
            {
                push__(action);
                popToken__();

                if (gotToken)
                {

                    d_acceptedTokens__ = 0;
                    return;
                }
            }
            else if (action < 0)
            {
                // no actions executed on recovery but save an already 
                // available token:
                if (d_token__ != _UNDETERMINED_)
                    pushToken__(d_token__);
 
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else
                ABORT();                    // abort when accepting during
                                            // error recovery
        }
        catch (...)
        {
            if (d_token__ == _EOF_)
                ABORT();                    // saw inappropriate _EOF_
                      
            popToken__();                   // failing token now skipped
        }
    }
}
catch (ErrorRecovery__)       // This is: DEFAULT_RECOVERY_MODE
{
    ABORT();
}

    // The parsing algorithm:
    // Initially, state 0 is pushed on the stack, and d_token__ as well as
    // d_nextToken__ are initialized to _UNDETERMINED_. 
    //
    // Then, in an eternal loop:
    //
    //  1. If a state does not have REQ_TOKEN no token is assigned to
    //     d_token__. If the state has REQ_TOKEN, nextToken() is called to
    //      determine d_nextToken__ and d_token__ is set to
    //     d_nextToken__. nextToken() will not call lex() unless d_nextToken__ is 
    //     _UNDETERMINED_. 
    //
    //  2. lookup() is called: 
    //     d_token__ is stored in the final element's d_token field of the
    //     state's SR_ array. 
    //
    //  3. The current token is looked up in the state's SR_ array
    //
    //  4. Depending on the result of the lookup() function the next state is
    //     shifted on the parser's stack, a reduction by some rule is applied,
    //     or the parsing function returns ACCEPT(). When a reduction is
    //     called for, any action that may have been defined for that
    //     reduction is executed.
    //
    //  5. An error occurs if d_token__ is not found, and the state has no
    //     default reduction. Error handling was described at the top of this
    //     file.

int elsoparseParser::parse()
try 
{
    push__(0);                              // initial state
    clearin();                              // clear the tokens.

    while (true)
    {
        try
        {
            if (s_state[d_state__]->d_type & REQ_TOKEN)
                nextToken();                // obtain next token


            int action = lookup(false);     // lookup d_token__ in d_state__

            if (action > 0)                 // SHIFT: push a new state
            {
                push__(action);
                popToken__();               // token processed
            }
            else if (action < 0)            // REDUCE: execute and pop.
            {
                executeAction(-action);
                                            // next token is the rule's LHS
                reduce__(s_productionInfo[-action]); 
            }
            else 
                ACCEPT();
        }
        catch (ErrorRecovery__)
        {
            errorRecovery();
        }
    }
}
catch (Return__ retValue)
{
    return retValue;
}




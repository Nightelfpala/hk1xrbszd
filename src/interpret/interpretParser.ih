// Generated by Bisonc++ V4.09.02 on Fri, 29 Apr 2016 13:37:05 +0200

    // Include this file in the sources of the class interpretParser.

// $insert class.h
#include "interpretParser.h"


interpretParser::interpretParser()
{
	
}

interpretParser::~interpretParser()
{
	if (lexer)
		delete lexer;
}

void interpretParser::initAp(Allapot* ap, std::map<std::string, int> *uc)
{	// kivulrol adott, az gondoskodik a felszabaditasrol
	// valoszinuleg ~ es ap egy osztalynak az adattagjai lesznek es az kapcsolja oket ossze
	allapot = ap;
	ugrocimkek = uc;
}

void interpretParser::preparse(std::istream& in, int argsize)
{
	if (lexer)
	{
		delete lexer;
	}
	lexer = new interpretFlexLexer( &in, &std::cerr);
	
	argmeret = argsize;
}

inline void interpretParser::error(char const *msg)
{
    std::stringstream ss;
	ss << d_loc__.first_line << ". sor: " << msg << std::endl;
    errorMsg = ss.str();
	throw HIBA;
}

inline int interpretParser::lex()
{
    d_loc__.first_line = lexer->lineno();
	int ret = lexer->yylex();
	
	if (ret == AZONOSITO or ret == SZAM or ret == REGISZTER)
	{
		d_val__.szoveg = new std::string(lexer->YYText());
	}
	if (ret == LEXERROR)
	{
		std::stringstream ss;
		ss << d_loc__.first_line << ". sor: lexikalis hiba: " << lexer->YYText() << std::endl;
		errorMsg = ss.str();
		throw HIBA;
	}
    return ret;
}

inline void interpretParser::print()         
{
    print__();           // displays tokens if --print was specified
}

inline void interpretParser::exceptionHandler__(std::exception const &exc)         
{
    throw;              // re-implement to handle exceptions thrown by actions
}


    // Add here includes that are only required for the compilation 
    // of interpretParser's sources.



    // UN-comment the next using-declaration if you want to use
    // int interpretParser's sources symbols from the namespace std without
    // specifying std::

//using namespace std;
